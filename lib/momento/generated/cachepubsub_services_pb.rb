# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: cachepubsub.proto for package 'cache_client.pubsub'

require 'grpc'
require_relative 'cachepubsub_pb'

module MomentoProtos
  module CacheClient
    module Pubsub
      module Pubsub
        # For working with topics in a cache.
        # Momento topics are conceptually located on a cache. They are best-effort multicast.
        # To use them, create a cache then start subscribing and publishing!
        #
        # Momento topic subscriptions try to give you information about the quality of the
        #   stream you are receiving. For example, you might miss messages if your network
        #   is slow, or if some intermediate switch fails, or due to rate limiting. It is
        #   also possible, though we try to avoid it, that messages could briefly come out
        #   of order between subscribers.
        #   We try to tell you when things like this happen via a Discontinuity in your
        #   subscription stream. If you do not care about occasional discontinuities then
        #   don't bother handling them! You might still want to log them just in case ;-)
        class Service
          include ::GRPC::GenericService

          self.marshal_class_method = :encode
          self.unmarshal_class_method = :decode
          self.service_name = 'cache_client.pubsub.Pubsub'

          # Publish a message to a topic.
          #
          # If a topic has no subscribers, then the effect of Publish MAY be either of:
          # * It is dropped and the topic is nonexistent.
          # * It is accepted to the topic as the next message.
          #
          # Publish() does not wait for subscribers to accept. It returns Ok upon accepting
          # the topic value. It also returns Ok if there are no subscribers and the value
          # happens to be dropped. Publish() can not guarantee delivery in theory but in
          # practice it should almost always deliver to subscribers.
          #
          # REQUIRES HEADER authorization: Momento auth token
          rpc :Publish, ::MomentoProtos::CacheClient::Pubsub::PB__PublishRequest, ::Common::PB__Empty
          # Subscribe to notifications from a topic.
          #
          # You will receive a stream of values and (hopefully occasional) discontinuities.
          # Values will appear as copies of the payloads you Publish() to the topic.
          #
          # REQUIRES HEADER authorization: Momento auth token
          rpc :Subscribe, ::MomentoProtos::CacheClient::Pubsub::PB__SubscriptionRequest, stream(::MomentoProtos::CacheClient::Pubsub::PB__SubscriptionItem)
        end

        Stub = Service.rpc_stub_class
      end
    end
  end
end
